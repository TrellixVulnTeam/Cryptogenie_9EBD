{"version":3,"file":"okta.service.d.ts","sources":["okta.service.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { Router, NavigationExtras } from '@angular/router';\nimport { OktaConfig } from '../models/okta.config';\nimport { UserClaims } from '../models/user-claims';\nimport { Observable } from 'rxjs';\nexport declare class OktaAuthService {\n    private auth;\n    private router;\n    private oktaAuth;\n    private config;\n    private observers;\n    $authenticationState: Observable<boolean>;\n    constructor(auth: OktaConfig, router: Router);\n    /**\n     * Checks if there is an access token and id token\n     */\n    isAuthenticated(): Promise<boolean>;\n    private emitAuthenticationState;\n    /**\n     * Returns the current accessToken in the tokenManager.\n     */\n    getAccessToken(): Promise<string | undefined>;\n    /**\n     * Returns the current idToken in the tokenManager.\n     */\n    getIdToken(): Promise<string | undefined>;\n    /**\n     * Returns user claims from the /userinfo endpoint if an\n     * accessToken is provided or parses the available idToken.\n     */\n    getUser(): Promise<UserClaims | undefined>;\n    /**\n     * Returns the configuration object used.\n     */\n    getOktaConfig(): OktaConfig;\n    /**\n     * Launches the login redirect.\n     * @param fromUri\n     * @param additionalParams\n     */\n    loginRedirect(fromUri?: string, additionalParams?: object): void;\n    /**\n     * Stores the intended path to redirect after successful login.\n     * @param uri\n     * @param queryParams\n     */\n    setFromUri(uri: string, queryParams?: object): void;\n    /**\n     * Returns the referrer path from localStorage or app root.\n     */\n    getFromUri(): {\n        uri: string;\n        extras: NavigationExtras;\n    };\n    /**\n     * Parses the tokens from the callback URL.\n     */\n    handleAuthentication(): Promise<void>;\n    /**\n     * Clears the user session in Okta and removes\n     * tokens stored in the tokenManager.\n     * @param uri\n     */\n    logout(uri?: string): Promise<void>;\n    /**\n     * Scrub scopes to ensure 'openid' is included\n     * @param scopes\n     */\n    scrubScopes(scopes: string): string;\n}\n"]}